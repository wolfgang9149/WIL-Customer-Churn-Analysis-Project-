{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   gender  SeniorCitizen Dependents  tenure PhoneService MultipleLines  \\\n",
      "0  Female              0         No       1           No            No   \n",
      "1    Male              0         No      34          Yes            No   \n",
      "2    Male              0         No       2          Yes            No   \n",
      "3    Male              0         No      45           No            No   \n",
      "4  Female              0         No       2          Yes            No   \n",
      "\n",
      "  InternetService        Contract  MonthlyCharges Churn  \n",
      "0             DSL  Month-to-month           29.85    No  \n",
      "1             DSL        One year           56.95    No  \n",
      "2             DSL  Month-to-month           53.85   Yes  \n",
      "3             DSL        One year           42.30    No  \n",
      "4     Fiber optic  Month-to-month           70.70   Yes  \n",
      "Index(['gender', 'SeniorCitizen', 'Dependents', 'tenure', 'PhoneService',\n",
      "       'MultipleLines', 'InternetService', 'Contract', 'MonthlyCharges',\n",
      "       'Churn'],\n",
      "      dtype='object')\n",
      "gender             0\n",
      "SeniorCitizen      0\n",
      "Dependents         0\n",
      "tenure             0\n",
      "PhoneService       0\n",
      "MultipleLines      0\n",
      "InternetService    0\n",
      "Contract           0\n",
      "MonthlyCharges     0\n",
      "Churn              0\n",
      "dtype: int64\n",
      "       SeniorCitizen       tenure  MonthlyCharges\n",
      "count    7043.000000  7043.000000     7043.000000\n",
      "mean        0.162147    32.371149       64.761692\n",
      "std         0.368612    24.559481       30.090047\n",
      "min         0.000000     0.000000       18.250000\n",
      "25%         0.000000     9.000000       35.500000\n",
      "50%         0.000000    29.000000       70.350000\n",
      "75%         0.000000    55.000000       89.850000\n",
      "max         1.000000    72.000000      118.750000\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.80      0.81      1697\n",
      "           1       0.48      0.50      0.49       628\n",
      "\n",
      "    accuracy                           0.72      2325\n",
      "   macro avg       0.65      0.65      0.65      2325\n",
      "weighted avg       0.72      0.72      0.72      2325\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.87      0.85      1697\n",
      "           1       0.59      0.49      0.54       628\n",
      "\n",
      "    accuracy                           0.77      2325\n",
      "   macro avg       0.71      0.68      0.69      2325\n",
      "weighted avg       0.76      0.77      0.76      2325\n",
      "\n",
      "[1 0 0 ... 1 1 0] 0.5874524714828897 0.5355285961871751 0.49203821656050956\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "185     1\n",
       "2715    0\n",
       "3825    0\n",
       "1807    1\n",
       "132     0\n",
       "Name: Churn_Yes, dtype: uint8"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#First import the main Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "data_frame= pd.read_csv('new_cleaned_data.csv')\n",
    "print(data_frame.head())\n",
    "print(data_frame.columns) \n",
    "# Double check whether there is any  missing values\n",
    "missing_val = data_frame.isnull().sum()\n",
    "\n",
    "# Display any possible missing values and summary statistics\n",
    "summary_statistics = data_frame.describe()\n",
    "print(missing_val)\n",
    "print(summary_statistics)\n",
    "\n",
    "\n",
    "# Use one-hot encoding method to convert categorical features to numerical  \n",
    "data_frame_encoded = pd.get_dummies(data_frame, drop_first=True)\n",
    "\n",
    "# Define the encoding feature and target\n",
    "x = data_frame_encoded.drop('Churn_Yes', axis=1)  # Feature\n",
    "y = data_frame_encoded['Churn_Yes']               # Target\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import tree\n",
    "\n",
    "# Split the data into testing and training data, Form a roughly 70-30 split, where around 30% for testing and around 70% of the data will be used for training.\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=42)\n",
    "\n",
    "# Display the shape of the resulting datasets\n",
    "(x_train.shape, x_test.shape, y_train.shape, y_test.shape)\n",
    "\n",
    "#Create an instance for decision classifier\n",
    "classifier_Tree = tree.DecisionTreeClassifier()\n",
    "\n",
    "# Train the decision tree\n",
    "classifier_Tree.fit(x_train, y_train)\n",
    "\n",
    "#Predict for the decision tree\n",
    "DecisionTree_Predicting=classifier_Tree.predict(x_test)\n",
    "\n",
    "#Import the Random Forest Classifier\n",
    "from sklearn. ensemble import RandomForestClassifier\n",
    "\n",
    "#As the cleaned data is smaller, instance is created for Random Forest Classifier\n",
    "randomForest=RandomForestClassifier(n_estimators=107, random_state = 42)\n",
    "\n",
    "#fitting my random forest classifier with train dataset\n",
    "randomForest.fit(x_train, y_train)\n",
    "\n",
    "#Random Forest Predicting in test dataset\n",
    "randomForest_Prediction= randomForest.predict(x_test)\n",
    "\n",
    "#Decision tree results\n",
    "from sklearn.metrics import classification_report\n",
    "print(classification_report(y_test,DecisionTree_Predicting))\n",
    "#Random Forest Result\n",
    "print(classification_report(y_test,randomForest_Prediction))\n",
    "# Calculate precision,f1 score, recall etc.\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "predicting= randomForest.predict(x_test)\n",
    "precision_scr = precision_score(y_test, predicting)\n",
    "recall_scr = recall_score(y_test, predicting)\n",
    "f1 = f1_score(y_test, predicting)\n",
    "print(predicting, precision_scr,f1, recall_scr)\n",
    "#Perform training and testing data\n",
    "x_train.head()\n",
    "y_train.head()\n",
    "x_test.head()\n",
    "y_test.head()\n",
    "\n",
    "#sns.pairplot(data_frame_encoded)\n",
    "\n",
    "#plt.xlabel(x_train.columns[0])\n",
    "#plt.ylabel(x_train.columns[1])\n",
    "#plt.show()\n",
    "#plt.title('Scatter plot of training set')\n",
    "#plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Determine the optimal number of clusters using the Elbow Method\n",
    "def use_elbow_method(data_frame_encoded):\n",
    "    #Sum of Squared Distance\n",
    "    sse = []\n",
    "    #let the number of clusters be in range of 1 to 10\n",
    "    for n in range(1, 11):\n",
    "        kmeans = KMeans(n_clusters=n, random_state=42)\n",
    "        kmeans.fit(data_frame_encoded)\n",
    "        sse.append(kmeans.inertia_)\n",
    "\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    plt.plot(range(1, 11), sse, marker='x')\n",
    "    plt.title('Elbow Method Diagram')\n",
    "    plt.xlabel('Number Of Clusters')\n",
    "    plt.ylabel('Sum Of Squared Distance')\n",
    "    plt.show()\n",
    "\n",
    "use_elbow_method(data_frame_encoded)\n",
    "\n",
    "#From the graph, we could see the optimal number of clusters would be n=4."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "298     0\n",
       "3318    1\n",
       "5586    0\n",
       "6654    1\n",
       "5362    0\n",
       "Name: Churn_Yes, dtype: uint8"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>tenure</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>gender_Male</th>\n",
       "      <th>Dependents_Yes</th>\n",
       "      <th>PhoneService_Yes</th>\n",
       "      <th>MultipleLines_Yes</th>\n",
       "      <th>InternetService_Fiber optic</th>\n",
       "      <th>Contract_One year</th>\n",
       "      <th>Contract_Two year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>185</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>24.80</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2715</th>\n",
       "      <td>0</td>\n",
       "      <td>41</td>\n",
       "      <td>25.25</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3825</th>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "      <td>19.35</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1807</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>76.35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>132</th>\n",
       "      <td>0</td>\n",
       "      <td>67</td>\n",
       "      <td>50.55</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      SeniorCitizen  tenure  MonthlyCharges  gender_Male  Dependents_Yes  \\\n",
       "185               0       1           24.80            0               0   \n",
       "2715              0      41           25.25            1               0   \n",
       "3825              0      52           19.35            0               1   \n",
       "1807              0       1           76.35            0               0   \n",
       "132               0      67           50.55            1               0   \n",
       "\n",
       "      PhoneService_Yes  MultipleLines_Yes  InternetService_Fiber optic  \\\n",
       "185                  0                  0                            0   \n",
       "2715                 1                  1                            0   \n",
       "3825                 1                  0                            0   \n",
       "1807                 1                  0                            1   \n",
       "132                  1                  0                            0   \n",
       "\n",
       "      Contract_One year  Contract_Two year  \n",
       "185                   0                  0  \n",
       "2715                  0                  0  \n",
       "3825                  0                  1  \n",
       "1807                  0                  0  \n",
       "132                   0                  1  "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "185     1\n",
       "2715    0\n",
       "3825    0\n",
       "1807    1\n",
       "132     0\n",
       "Name: Churn_Yes, dtype: uint8"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>tenure</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>gender_Male</th>\n",
       "      <th>Dependents_Yes</th>\n",
       "      <th>PhoneService_Yes</th>\n",
       "      <th>MultipleLines_Yes</th>\n",
       "      <th>InternetService_Fiber optic</th>\n",
       "      <th>Contract_One year</th>\n",
       "      <th>Contract_Two year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>74.55</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3318</th>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>29.50</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5586</th>\n",
       "      <td>0</td>\n",
       "      <td>27</td>\n",
       "      <td>19.15</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6654</th>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>86.50</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5362</th>\n",
       "      <td>0</td>\n",
       "      <td>65</td>\n",
       "      <td>24.75</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      SeniorCitizen  tenure  MonthlyCharges  gender_Male  Dependents_Yes  \\\n",
       "298               0      40           74.55            1               1   \n",
       "3318              0      10           29.50            1               0   \n",
       "5586              0      27           19.15            0               0   \n",
       "6654              0       7           86.50            0               0   \n",
       "5362              0      65           24.75            1               1   \n",
       "\n",
       "      PhoneService_Yes  MultipleLines_Yes  InternetService_Fiber optic  \\\n",
       "298                  1                  1                            0   \n",
       "3318                 0                  0                            0   \n",
       "5586                 1                  0                            0   \n",
       "6654                 1                  1                            1   \n",
       "5362                 1                  1                            0   \n",
       "\n",
       "      Contract_One year  Contract_Two year  \n",
       "298                   0                  0  \n",
       "3318                  0                  0  \n",
       "5586                  1                  0  \n",
       "6654                  0                  0  \n",
       "5362                  0                  1  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
